class Solution {
    public int search(int[] nums, int target) {
        int low=0,high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            if(nums[low]<=nums[mid])
            {
                if(nums[low]<=target && target<nums[mid])
                {
                    high=mid-1;
                }
                else
                {
                    low=mid+1;
                }
            }
            else
            {
                if(nums[mid]<target && target<=nums[high])
                {
                    low=mid+1;
                }
                else
                {
                    high=mid-1;
                }
            }
        }
        return -1;
    }
}

time=O(log n)
space=O(1)

class Solution {
      public int searchtarget(int[] nums, int low, int high, int target) {
        if (low > high) {
            return -1;
        }

        int mid = (low + high) / 2;
        if (nums[mid] == target) {
            return mid;
        }

       
        if (nums[low] <= nums[mid]) {
            if (nums[low] <= target && target < nums[mid]) {
                return searchtarget(nums, low, mid - 1, target);
            } else {
                return searchtarget(nums, mid + 1, high, target);
            }
        }
    
        else {
            if (nums[mid] < target && target <= nums[high]) {
                return searchtarget(nums, mid + 1, high, target);
            } else {
                return searchtarget(nums, low, mid - 1, target);
            }
        }
    }

    public int search(int[] nums, int target) {
        return searchtarget(nums, 0, nums.length - 1, target);
    }
}

time=O(log n)
space=O(log n)
