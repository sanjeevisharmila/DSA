class Solution {
    public boolean shipdays(int[] weights,int cap,int days)
    {
        int tot=0,day=1;
        for(int i=0;i<weights.length;i++)
        {
            if(tot+weights[i]>cap)
            {
                tot=weights[i];
                day+=1; 
            }
            else
            {
                tot+=weights[i];
            }
        }
         return day<=days;
    }
    public int shipWithinDays(int[] weights, int days) {
        int mini=Integer.MIN_VALUE,sum=0;
        for(int i=0;i<weights.length;i++)
        {
            mini=Math.max(weights[i],mini);
            sum+=weights[i];
        }
        for(int j=mini;j<=sum;j++)
        {
            if(shipdays(weights,j,days))
            {
                return j;
            }
        }
        return -1;
    }
}

time=O(n)+O(n*(sum(weights)-max(weights)+1))
space=O(1)

class Solution {
    public boolean shipdays(int[] weights,int cap,int days)
    {
        int tot=0,day=1;
        for(int i=0;i<weights.length;i++)
        {
            if(tot+weights[i]>cap)
            {
                tot=weights[i];
                day+=1; 
            }
            else
            {
                tot+=weights[i];
            }
        }
         return day<=days;
    }
    public int shipWithinDays(int[] weights, int days) {
        int mini=Integer.MIN_VALUE,sum=0;
        for(int i=0;i<weights.length;i++)
        {
            mini=Math.max(weights[i],mini);
            sum+=weights[i];
        }
        int low=mini,high=sum,ans=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(shipdays(weights,mid,days))
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
}

time=O(n)+O(n* log(sum(weights)-max(weights)+1))
space=O(1)
