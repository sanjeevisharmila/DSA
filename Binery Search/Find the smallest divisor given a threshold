class Solution {
    public boolean smallest(int[] arr,int div,int threshold)
    {
        int tot=0;
        for(int i=0;i<arr.length;i++)
        {
            tot+=Math.ceil((double)arr[i]/div);
        }
        return tot<=threshold;
    }
    public int smallestDivisor(int[] nums, int threshold) {
        int maxi=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            maxi=Math.max(nums[i],maxi);
        }
        for(int j=1;j<=maxi;j++)
        {
            if(smallest(nums,j,threshold))
            {
                return j;
            }
        }
        return -1;
    }
}

time=O(n*maxi)
space=O(1)

class Solution {
    public boolean smallest(int[] arr,int div,int threshold)
    {
        int tot=0;
        for(int i=0;i<arr.length;i++)
        {
            tot+=Math.ceil((double)arr[i]/div);
        }
        return tot<=threshold;
    }
    public int smallestDivisor(int[] nums, int threshold) {
        int maxi=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            maxi=Math.max(nums[i],maxi);
        }
        int low=1,high=maxi,ans=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(smallest(nums,mid,threshold))
            {
                 ans=mid;
                 high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
}

time=O(n*log(maxi))
space=O(1)
