class Solution {
    int upperBound(int[] arr, int target) {
        int n=arr.length;
        int low=0,high=n-1 ,ans=n;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr[mid]>target)
            {
            ans=mid;
            high=mid-1;
            }
            else
            {
            low=mid+1;
            }
        }
        return ans;
    }
}
time=O(log n)
space=O(1)

class Solution {
    public int upper(int[] arr,int low,int high,int target,int ans)
    {
        if(low>high)
        {
            return ans;
        }
        int mid=(low+high)/2;
        if(arr[mid]>target)
        {
            ans=mid;
            return upper(arr,low,mid-1,target,ans);
        }
        else{
            return upper(arr,mid+1,high,target,ans);
        }
    }
    int upperBound(int[] arr, int target) {
         return upper(arr,0,arr.length-1,target,arr.length);
    }
}

time=O(log n)
space=O(log n)
