class Solution {
    public int findKRotation(List<Integer> arr) {
        int low=0,high=arr.size()-1;
        int ind=-1;
        int mini=Integer.MAX_VALUE;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr.get(low)<=arr.get(mid))
            {
                if(arr.get(low)<mini)
                {
                    mini=arr.get(low);
                    ind=low;
                }
                low=mid+1;
            }
            else
            {
                if(arr.get(mid)<mini)
                {
                    mini=arr.get(mid);
                    ind=mid;
                }
                high=mid-1;
            }
        }
        return ind;
    }
}
time=O(log n)
space=O(1)

// User function Template for Java

class Solution {
    public int findKRotation(List<Integer> arr) {
      return rotation(arr,0,arr.size()-1,Integer.MAX_VALUE,-1);
    }
    public int rotation(List<Integer> arr,int low,int high,int mini,int ind)
    {
        if(low>high)
        {
            return ind;
        }
        int mid=(low+high)/2;
        if(arr.get(low)<=arr.get(mid))
        {
              if(arr.get(low)<mini)
              {
                  mini=arr.get(low);
                  ind=low;
              }
              return rotation(arr,mid+1,high,mini,ind);
        }
        else
        {
            if(arr.get(mid)<mini)
            {
                mini=arr.get(mid);
                ind=mid;
            }
            return rotation(arr,low,mid-1,mini,ind);
        }
        
    }
}

time=O(log n)
space=O(log n)
