class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int n=n1+n2;
        int[] nums3=new int[n];
        int i=0,j=0,ind=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                nums3[ind++]=nums1[i++];
            }
            else
            {
                nums3[ind++]=nums2[j++];
            }
        }
        while(i<n1)
        {
            nums3[ind++]=nums1[i++];
        }
        while(j<n2)
        {
            nums3[ind++]=nums2[j++];
        }
        if(n%2==1)
        {
            return (double)nums3[n/2];
        }
        else
        {
            return (double)((double)(nums3[n/2])+(double)(nums3[n/2-1]))/2;
        }
    }
}
time=O(n1+n2)
space=O(n1+n2)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int n=n1+n2;
        int ind1=n/2-1,ind2=n/2,ele1=-1,ele2=-1;
        int i=0,j=0,count=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                if(count==ind1)
                ele1=nums1[i];
                if(count==ind2)
                ele2=nums1[i];
                i++;
                count++;
            }
            else
            {
                 if(count==ind1)
                ele1=nums2[j];
                if(count==ind2)
                ele2=nums2[j];
                j++;
                count++;
            }
        }
        while(i<n1)
        {
              if(count==ind1)
                ele1=nums1[i];
                if(count==ind2)
                ele2=nums1[i];
                i++;
                count++;
        }
        while(j<n2)
        {
             if(count==ind1)
                ele1=nums2[j];
                if(count==ind2)
                ele2=nums2[j];
                j++;
                count++;
        }
        if(n%2==1)
        {
            return (double)ele2;
        }
        else
        {
            return (double)((double)(ele1)+(double)(ele2))/2;
        }
    }
}

time=O(n1+n2)
space=O(1)



class Solution {
    public double medianOf2(int a[], int b[]) {
        if(a.length>b.length)
        {
            return medianOf2(b,a);
        }
        int n1=a.length,n2=b.length;
        int n=n1+n2;
        int low=0,high=n1;
        while(low<=high)
        {
            int mid1=(low+high)/2;
            int mid2=(n1+n2+1)/2-mid1;
            int left1=(mid1==0)? Integer.MIN_VALUE:a[mid1-1];
            int right1=(mid1==n1)? Integer.MAX_VALUE:a[mid1];
            int left2=(mid2==0)? Integer.MIN_VALUE:b[mid2-1];
            int right2=(mid2==n2)? Integer.MAX_VALUE:b[mid2];
            
            if(left1<=right2 && left2<=right1)
            {
                if(n%2==0)
                {
                    return (Math.max(left1,left2)+Math.min(right1,right2))/2.0;
                }
                else
                {
                    return Math.max(left1,left2);
                }
            }
            else if(left1>right2)
            {
                high=mid1-1;
            }
            else
            {
                low=mid1+1;
            }
        }
        return -1;
    }
}

time=O(log min(n1,n2))
space=O(1)
