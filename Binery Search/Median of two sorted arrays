class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int n=n1+n2;
        int[] nums3=new int[n];
        int i=0,j=0,ind=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                nums3[ind++]=nums1[i++];
            }
            else
            {
                nums3[ind++]=nums2[j++];
            }
        }
        while(i<n1)
        {
            nums3[ind++]=nums1[i++];
        }
        while(j<n2)
        {
            nums3[ind++]=nums2[j++];
        }
        if(n%2==1)
        {
            return (double)nums3[n/2];
        }
        else
        {
            return (double)((double)(nums3[n/2])+(double)(nums3[n/2-1]))/2;
        }
    }
}
time=O(n1+n2)
space=O(n1+n2)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int n=n1+n2;
        int ind1=n/2-1,ind2=n/2,ele1=-1,ele2=-1;
        int i=0,j=0,count=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                if(count==ind1)
                ele1=nums1[i];
                if(count==ind2)
                ele2=nums1[i];
                i++;
                count++;
            }
            else
            {
                 if(count==ind1)
                ele1=nums2[j];
                if(count==ind2)
                ele2=nums2[j];
                j++;
                count++;
            }
        }
        while(i<n1)
        {
              if(count==ind1)
                ele1=nums1[i];
                if(count==ind2)
                ele2=nums1[i];
                i++;
                count++;
        }
        while(j<n2)
        {
             if(count==ind1)
                ele1=nums2[j];
                if(count==ind2)
                ele2=nums2[j];
                j++;
                count++;
        }
        if(n%2==1)
        {
            return (double)ele2;
        }
        else
        {
            return (double)((double)(ele1)+(double)(ele2))/2;
        }
    }
}

time=O(n1+n2)
space=O(1)
