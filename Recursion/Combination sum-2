class Solution {
    public void backtrack(int[] candidates, List<Integer>temp,List<List<Integer>>res,int target,int ind)
    {
        if(target==0)
        {
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i=ind;i<candidates.length;i++)
        {
            if(i>ind && candidates[i]==candidates[i-1])
            {
                continue;
            }
            if(candidates[i]<=target)
            {
                temp.add(candidates[i]);
                backtrack(candidates,temp,res,target-candidates[i],i+1);
                temp.remove(temp.size()-1);
            }
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>>res=new ArrayList<>();
        List<Integer>temp=new ArrayList<>();
        backtrack(candidates,temp,res,target,0);
        return res;
    }
}

time=O(2^n*k+n logn)
space=O(2^n*k+n)
