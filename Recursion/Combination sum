class Solution {
    public void backtrack(int[] candidates,List<Integer>temp,List<List<Integer>>res,int target,int ind)
    {
       if(target==0)
       {
          res.add(new ArrayList<>(temp));
          return;
       }
       for(int i=ind;i<candidates.length;i++)
       {
          if(candidates[i]<=target)
          {
            temp.add(candidates[i]);
            backtrack(candidates,temp,res,target-candidates[i],i);
            temp.remove(temp.size()-1);
          }
       }
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
       List<List<Integer>>res=new ArrayList<>();
       backtrack(candidates,new ArrayList<>(),res,target,0);
       return res;
    }
}

time=O(k*t)  k=no of combination,t=target to reach
space=O(k*t)
